#!/usr/bin/env python3

import argparse
import random

ALPHA = "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ"
NUMERIC = "1234567890"
ALPHANUMERIC = f"{ALPHA} {NUMERIC}"
SPECIAL = f"{ALPHANUMERIC} ()&$#*"
FULL_SPECIAL = SPECIAL + "@!\"%/=?\\][{^+'~_-.:;|<>,"


def get_number_char(string: str) -> list:
    numbers = [x.strip(' ') for x in string.split('-')]
    try:
        numbers = list(map(int, numbers))
        if len(numbers) > 2:
            raise ValueError
        if len(numbers) == 2 and numbers[0] > numbers[1]:
            msg = "%r: the range is not valid (%d > %d)" % (string, numbers[0], numbers[1])
            raise argparse.ArgumentTypeError(msg)
    except ValueError:
        msg = "%r is not a valid number or range of number (n1-n2)" % string
        raise argparse.ArgumentTypeError(msg)
    return numbers


def check_args(args: argparse.Namespace) -> argparse.Namespace:
    if args.a is True:
        args.s = ALPHA
    elif args.ac is True:
        args.s = ALPHANUMERIC
    elif args.sp is True:
        args.s = SPECIAL
    elif args.nu is True:
        args.s = NUMERIC
    return args


def run_gen(args: argparse.Namespace) -> None:
    if len(args.l) == 2:
        end = random.choice(range(args.l[0], args.l[1]))
    else:
        end = args.l[0]

    # split strings by ' ' to have all the different character
    # sets of the arg.s option
    list_strings = args.s.split()
    real_set = "".join(list_strings)

    for j in range(0, args.n):
        passwd = []
        for i in range(0, end):
            passwd.append(random.choice(real_set))

        # ensure that there is always one character from each character set
        # to avoid relying on complete randomness
        choices = [x for x in range(0, end)]
        backup = list(choices)
        for i in list_strings:
            if len(choices) == 0:
                choices = list(backup)
            pos = random.choice(choices)
            passwd[pos] = random.choice(i)
            choices.remove(pos)
        print("".join(passwd))


def main() -> None:
    parser = argparse.ArgumentParser(description='A tool to generate password')
    parser.add_argument("-l",  help="Number of characters, it can be either a single number or a range (i.e. 10-15)",
                        type=get_number_char, default="10")
    parser.add_argument("-s", help="Specify a string with the characters to be used", default=FULL_SPECIAL)
    parser.add_argument("-n", help="Numbers of generated password", default=1, type=int)
    parser.add_argument("-a", help="Only use alphabetical characters", action='store_true')
    parser.add_argument("-ac", help="Only use alphanumeric characters", action='store_true')
    parser.add_argument("-sp", help="Only use alphanumeric and a few special characters", action='store_true')
    parser.add_argument("-nu", help="Only use numeric characters", action='store_true')
    args = parser.parse_args()
    args = check_args(args)
    run_gen(args)


if __name__ == "__main__":
    main()
